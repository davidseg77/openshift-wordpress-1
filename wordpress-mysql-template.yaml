kind: Template
apiVersion: template.openshift.io/v1
metadata:
  name: wordpress-mysql
  annotations:
    openshift.io/display-name: WordPress y MySQL
    description: >
      Una aplicación Wordpress con una base de datos MySQL, que usan almacenamiento persistente
      para guardar tanto lo que subamos a Wordpress como los datos de la base de datos.
    tags: instant-app,php,wordpress
    iconClass: icon-php
labels:
  template: wordpress-mysql
  app.kubernetes.io/part-of: wordpress
parameters:
  - name: APPLICATION_NAME
    description: >
      Nombre de la aplicación (será usada para los servicios, rutas, etc)
    value: wordpress
    required: true

  - name: SOURCE_REPOSITORY_URL
    description: La URL en la que se encuentra la aplicación Wordpress
    value: https://github.com/davidseg77/openshift-wordpress-1
    required: true

  - name: SOURCE_REPOSITORY_REF
    description: >
       La rama, etiqueta, etc, en el que estará ubicada la aplicación.
    value: main
    required: true

  - name: CONTEXT_DIR
    description: >
      La ruta relativa de la aplicación en el caso de no estar usando el directorio raíz.
    value: wordpress

  - name: GITHUB_WEBHOOK_SECRET
    description: Una cadena secreta que se usará a la hora de configurar el webhook de Github
    generate: expression
    from: "[a-zA-Z0-9]{40}"

  - name: APPLICATION_DOMAIN
    description: >
      El nombre del dominio que se usará como ruta a la aplicación. Si se deja en blanco
      se creará uno por defecto.
    value:

  - name: DATABASE_NAME
    description: Nombre de la base de datos.
    value: wordpress
    required: true

  - name: DATABASE_USER
    description: Usuario de la base de datos.
    value: wordpress
    required: true

  - name: DATABASE_PASSWORD
    description: Contraseña de la base de datos.
    value: wordpress
    required: true


objects:
  # Servicio de WordPress
  - kind: Service
    apiVersion: v1
    metadata:
      name: ${APPLICATION_NAME}
      annotations:
        description: Expone y balancea la carga entre los pods de la aplicación.
        service.alpha.openshift.io/dependencies: "[{'name': '${APPLICATION_NAME}-mysql', 'kind': 'Service'}]"
    spec:
      ports:
        - name: web
          port: 8080
          targetPort: 8080
      selector:
        name: ${APPLICATION_NAME}

  # WordPress Route
  - kind: Route
    apiVersion: v1
    metadata:
      name: ${APPLICATION_NAME}
    spec:
      host: ${APPLICATION_DOMAIN}
      to:
        kind: Service
        name: ${APPLICATION_NAME}

  # WordPress ImageStream
  - kind: ImageStream
    apiVersion: v1
    metadata:
      name: ${APPLICATION_NAME}

  # WordPress BuildConfig
  - kind: BuildConfig
    apiVersion: v1
    metadata:
      name: ${APPLICATION_NAME}
      annotations:
        description: Define como se construirá la aplicación
    spec:
      source:
        type: Git
        git:
          uri: ${SOURCE_REPOSITORY_URL}
          ref: ${SOURCE_REPOSITORY_REF}
        contextDir: ${CONTEXT_DIR}
      strategy:
        type: Source
        sourceStrategy:
          from:
            kind: ImageStreamTag
            namespace: openshift
            name: 'php:latest'
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
      triggers:
        - type: ImageChange
        - type: ConfigChange
        - type: GitHub
          github:
            secret: ${GITHUB_WEBHOOK_SECRET}

  # PersistentVolumeClaim de Wordpress
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: ${APPLICATION_NAME}-subidas
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi

  # PersistentVolumeClaim de Wordpress 2
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: ${APPLICATION_NAME}-contenido
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi

  # WordPress DeploymentConfig
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: ${APPLICATION_NAME}
      annotations:
        description: Define como se desplegará la aplicación
    spec:
      strategy:
        type: Recreate
      triggers:
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
              - ${APPLICATION_NAME}
            from:
              kind: ImageStreamTag
              name: ${APPLICATION_NAME}:latest
        - type: ConfigChange
      replicas: 1
      selector:
        name: ${APPLICATION_NAME}
      template:
        metadata:
          name: ${APPLICATION_NAME}
          labels:
            name: ${APPLICATION_NAME}
        spec:
          containers:
            - name: ${APPLICATION_NAME}
              image: ${APPLICATION_NAME}
              ports:
                - containerPort: 8080
              env:
                - name: WORDPRESS_DB_HOST
                  value: ${APPLICATION_NAME}-mysql
                - name: WORDPRESS_DB_NAME
                  value: ${DATABASE_NAME}
                - name: WORDPRESS_DB_USER
                  value: ${DATABASE_USER}
                - name: WORDPRESS_DB_PASSWORD
                  value: ${DATABASE_PASSWORD}
              volumeMounts:
                - name: ${APPLICATION_NAME}-subidas
                  mountPath: /opt/app-root/src/pv-subidas
                - name: ${APPLICATION_NAME}-contenido
                  mountPath: /opt/app-root/src/wp-content/languages
                  subPath: languages
          volumes:
            - name: ${APPLICATION_NAME}-subidas
              persistentVolumeClaim:
                claimName: ${APPLICATION_NAME}-subidas
            - name: ${APPLICATION_NAME}-contenido
              persistentVolumeClaim:
                claimName: ${APPLICATION_NAME}-contenido

  # Servicio MySQL
  - kind: Service
    apiVersion: v1
    metadata:
      name: ${APPLICATION_NAME}-mysql
      annotations:
        description: Expone el servidor de base de datos.
    spec:
      ports:
        - name: mysql
          port: 3306
          targetPort: 3306
      selector:
        name: ${APPLICATION_NAME}-mysql

  # MySQL PersistentVolumeClaim
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: ${APPLICATION_NAME}-mysql
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi

  # MySQL DeploymentConfig
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: ${APPLICATION_NAME}-mysql
      annotations:
        description: Define como se despliega la base de datos
    spec:
      strategy:
        type: Recreate
      triggers:
        - type: ConfigChange
      replicas: 1
      selector:
        name: ${APPLICATION_NAME}-mysql
      template:
        metadata:
          name: ${APPLICATION_NAME}-mysql
          labels:
            name: ${APPLICATION_NAME}-mysql
        spec:
          containers:
            - name: mysql
              image: image-registry.openshift-image-registry.svc:5000/openshift/mysql
              ports:
                - containerPort: 3306
              env:
                - name: MYSQL_USER
                  value: ${DATABASE_USER}
                - name: MYSQL_PASSWORD
                  value: ${DATABASE_PASSWORD}
                - name: MYSQL_DATABASE
                  value: ${DATABASE_NAME}
              volumeMounts:
                - name: ${APPLICATION_NAME}-mysql-data
                  mountPath: /var/lib/mysql
          volumes:
            - name: ${APPLICATION_NAME}-mysql-data
              persistentVolumeClaim:
                claimName: ${APPLICATION_NAME}-mysql
